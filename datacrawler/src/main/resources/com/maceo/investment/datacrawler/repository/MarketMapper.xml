<?xml version="1.0" encoding="UTF-8" ?>
<!--
       Copyright 2015-2016 the original author or authors.
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.maceo.investment.datacrawler.repository.MarketRepository">
    <resultMap id="stockMap" type="Stock">
        <constructor>
            <idArg column="stock_id" javaType="java.util.UUID" typeHandler="UUIDTypeHandler"/>
            <arg column="stock_code" javaType="String"/>
            <arg column="stock_name" javaType="String"/>
            <arg column="stock_market_id" javaType="String"/>
            <arg column="created_date" javaType="DateTime" typeHandler="JodaDateTimeTypeHandler"/>
        </constructor>
    </resultMap>

    <resultMap id="marketMap" type="Market">
        <id column="market_id" property="marketId"/>
        <result column="market_desc" property="marketDesc"/>
        <result column="code_crawl_base_url" property="codeCrawlBaseUrl"/>
        <collection property="stocks" ofType="Stock" resultMap="stockMap"/>
    </resultMap>

    <resultMap id="stockLastCrawlDateMap" type="StockLastCrawlDate">
        <constructor>
            <idArg javaType="Stock" resultMap="stockMap"/>
            <arg column="last_crawl_date" javaType="DateTime" typeHandler="JodaDateTimeTypeHandler"/>
        </constructor>
    </resultMap>

    <resultMap id="stockDailyDataMap" type="StockDailyData">
        <constructor>
            <idArg column="yyyymmdd" javaType="DateTime" typeHandler="JodaDateTimeTypeHandler"/>
            <arg column="final_price" javaType="_int"/>
            <arg column="start_price" javaType="_int"/>
            <arg column="high_price" javaType="_int"/>
            <arg column="low_price" javaType="_int"/>
            <arg column="trace_volume" javaType="_int"/>
        </constructor>
    </resultMap>

    <resultMap id="financialSheetMap" type="FinancialSheet">
        <constructor>
            <idArg column="financial_sheet_id" javaType="UUID" typeHandler="UUIDTypeHandler"/>
            <arg column="stock_id" javaType="UUID" typeHandler="UUIDTypeHandler"/>
            <arg column="year" javaType="_int"/>
            <arg column="quarter" javaType="_int"/>
            <arg column="financial_sheet_type" javaType="_int"/>
            <arg column="estimated_sheet" javaType="_boolean"/>
            <arg column="created_date" javaType="DateTime" typeHandler="JodaDateTimeTypeHandler"/>
        </constructor>
    </resultMap>

    <resultMap id="financialSheetItemMap" type="FinancialSheetItem">
        <constructor>
            <idArg column="term" javaType="String"/>
            <arg column="value" javaType="_long"/>
            <arg column="created_date" javaType="DateTime" typeHandler="JodaDateTimeTypeHandler"/>
        </constructor>
    </resultMap>

    <sql id="marketColumns">
        m.market_id
       ,m.market_desc
       ,m.code_crawl_base_url
    </sql>

    <sql id="stockColumns">
        s.stock_id
        ,s.stock_code
        ,s.stock_name
        ,s.market_id as stock_market_id
        ,s.created_date
    </sql>

    <sql id="financialSheetColumns">
         f.financial_sheet_id
        ,f.stock_id
        ,f.year
        ,f.quarter
        ,financial_sheet_type
        ,f.estimated_sheet
        ,f.created_date
    </sql>

    <select id="getMarkets" resultMap="marketMap">
        /* MarketMapper.getMarkets */
        select <include refid="marketColumns"/>
              ,<include refid="stockColumns"/>
        from datacrawl.market m
        left join datacrawl.stock s on m.market_id = s.market_id
    </select>

    <insert id="insertStock" parameterType="Stock">
        /* MarketMapper.insertStock */
        insert into stock (stock_id, market_id, stock_code, stock_name) values (#{stockId, typeHandler=UUIDTypeHandler}, #{marketId}, #{stockCode}, #{stockName})
    </insert>

    <select id="getStock" resultMap="stockMap">
        /* MarketMapper.getStock */
        select <include refid="stockColumns"/>
          from datacrawl.stock s
         where stock_id = #{stockId}
    </select>

    <select id="getStockByStockCode" resultMap="stockMap">
        /* MarketMapper.getStockByStockCode */
        select <include refid="stockColumns"/>
          from datacrawl.stock s
         where stock_code = #{stockCode}
           and market_id = #{marketId}
    </select>

    <select id="getStocksToCrawlDailyData" resultMap="stockLastCrawlDateMap">
        /* MarketMapper.getStocksToCrawlDailyData */
        select <include refid="stockColumns"/>, cast('19000101' as date) as last_crawl_date
        from datacrawl.stock s
        where not exists (select 1 from datacrawl.stock_daily_data where STOCK_ID = s.stock_id)

        union


        select <include refid="stockColumns"/>, s.last_crawl_date
        from (
        select s.* , (select coalesce(max(yyyymmdd), cast('19000101' as date)) from datacrawl.stock_daily_data where stock_id = s.stock_id) as last_crawl_date
        from datacrawl.stock s
        ) s
        where s.last_crawl_date &lt; #{queryDate}
    </select>

    <insert id="insertStockDailyData">
        /* MarketMapper.insertStockDailyData */
        replace into datacrawl.stock_daily_data (stock_id, yyyymmdd, final_price, start_price, high_price, low_price, trade_volume) values
        (#{stockId, typeHandler=UUIDTypeHandler}, #{data.yyyymmdd, typeHandler=JodaDateTimeTypeHandler}, #{data.finalPrice}, #{data.startPrice}, #{data.highPrice}, #{data.lowPrice}, #{data.tradeVolume} )
    </insert>

    <select id="getFinancialSheetsByStock" resultMap="financialSheetMap">
        select <include refid="financialSheetColumns"/>
          from datacrawl.financial_sheet
         where stock_id = #{stockId, typeHandler=UUIDTypeHandler}
    </select>

</mapper>
